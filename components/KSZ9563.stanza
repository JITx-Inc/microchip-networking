#use-added-syntax(jitx)
defpackage microchip-networking/components/KSZ9563:
  import core
  import collections
  import jitx
  import jitx/commands
  import jitx/parts/query-api

  import jsl
  import power-systems
  import debug/test-points

defn to-tuple (pad-ids:Int ...) -> Tuple<Int> :
  pad-ids

doc: \<DOC>
Composite bundle for the MDI and LED pin assignment

The MDI port and the LED must be matched so that
the correct status LED control goes to the right
connector.
<DOC>
public pcb-bundle MDI-1000BaseT-With-LEDs:
  port MDI : MDI-1000Base-T
  port LED : pin[2]


public pcb-component KSZ9563R :
  name = "KSZ9563R"
  description = "3-Port Gigabit Ethernet Switch"
  mpn = "KSZ9563RNXI"
  manufacturer = "Microchip, Inc."
  datasheet = "https://ww1.microchip.com/downloads/aemDocuments/documents/UNG/ProductDocuments/DataSheets/KSZ9563R-Data-Sheet-DS00002419.pdf"
  reference-prefix = "U"

  pin-properties :
    [pin:Ref         | pads:Int ... | side:Dir | name:String]
    ; MDI Interfaces
    [TXRX1P_A        | 62           | Right | - ]
    [TXRX1M_A        | 63           | Right | - ]
    [TXRX1P_B        | 1            | Right | - ]
    [TXRX1M_B        | 2            | Right | - ]
    [TXRX1P_C        | 3            | Right | - ]
    [TXRX1M_C        | 4            | Right | - ]
    [TXRX1P_D        | 6            | Right | - ]
    [TXRX1M_D        | 7            | Right | - ]

    [TXRX2P_A        | 9            | Right | - ]
    [TXRX2M_A        | 10           | Right | - ]
    [TXRX2P_B        | 12           | Right | - ]
    [TXRX2M_B        | 13           | Right | - ]
    [TXRX2P_C        | 14           | Right | - ]
    [TXRX2M_C        | 15           | Right | - ]
    [TXRX2P_D        | 17           | Right | - ]
    [TXRX2M_D        | 18           | Right | - ]

    ; MII Interfaces
    [RXD[0]          | 24           | Left  | "RXD0"     ]
    [RXD[1]          | 23           | Left  | "RXD1"     ]
    [RXD[2]          | 22           | Left  | "RXD2"     ]
    [RXD[3]          | 21           | Left  | "RXD3"     ]
    [RXCLK_REFCLKO   | 25           | Left  | "RX_CLK/REFCLKO"   ]
    [RXDV_CRSDV_RXCTL | 27          | Left  | "RX_DV/CRS_DV/RX_CTL"   ]
    [RX_ER           | 28           | Left  | - ]

    [TXD[0]          | 32           | Left  | "TXD0"]
    [TXD[1]          | 31           | Left  | "TXD1"]
    [TXD[2]          | 30           | Left  | "TXD2"]
    [TXD[3]          | 29           | Left  | "TXD3"]
    [TXCLK_REFCLKI   | 33           | Left  | "TX_CLK/REFCLKI"]
    [TXEN_TXCTL      | 35           | Left  | "TX_EN/TX_CTL"]
    [TX_ER           | 36           | Left  | - ]

    ; Config

    [GPIO[1]         | 39           | Left  | "GPIO_1"]
    [GPIO[2]         | 40           | Left  | "GPIO_2"]

    [LED1[0]         | 52           | Left  | "LED1_0"]
    [LED1[1]         | 53           | Left  | "LED1_1"]

    [LED2[0]         | 42           | Left  | "LED2_0"]
    [LED2[1]         | 43           | Left  | "LED2_1"]


    [PME_N           | 44           | Right  | - ]
    [INTRP_N         | 45           | Right  | - ]
    [RESET_N         | 46           | Right  | - ]

    [SCL_MDC         | 50           | Right  | "SCL/MDC" ]
    [SDI_SDA_MDIO    | 48           | Right  | "SDI/SDA/MDIO" ]
    [SDO             | 47           | Right  | - ]
    [SCS_N           | 49           | Right  | - ]

    [XO              | 57           | Left  | - ]
    [XI              | 58           | Left  | - ]
    [ISET            | 60           | Left  | - ]

  ; Power
    for (pad-id in to-tuple(8, 19, 61), i in 0 to false) do:
      [AVDDH[i]        | pad-id            | Right | - ]

    for (pad-id in to-tuple(5, 11, 16, 56, 64), i in 0 to false) do:
      [AVDDL[i]        | pad-id           | Left | - ]

    for (pad-id in to-tuple(20, 34, 37, 41, 51, 55), i in 0 to false) do:
      [DVDDL[i]        | pad-id           | Left | - ]

    for (pad-id in to-tuple(26, 38, 54), i in 0 to false) do:
      [VDDIO[i]        | pad-id           | Right | - ]

    [GND             | 59           | Left  | - ]
    [PAD             | 65           | Left  | - ]


  val sw-r = #R(sw)
  val pwr-r = #R(power)
  val cfg-r = #R(config)

  val box = BoxSymbol(self)

  set-grid(box, [2, 2], sw-r)

  set-bank(sw-r, find-pins-by-regex(box, "^TXRX.*$"))
  set-row(0, find-pins-by-regex(box, "^TXRX1.*$"))
  set-row(1, find-pins-by-regex(box, "^TXRX2.*$"))

  set-bank(sw-r, find-pins-by-regex(box, "^(TX|RX).*$"))
  set-row(0, find-pins-by-regex(box, "^TX[^R].*$"))
  set-row(1, find-pins-by-regex(box, "^RX.*$"))

  set-grid(box, [2, 2], pwr-r)
  set-bank(pwr-r, self.AVDDH, self.AVDDL, self.DVDDL, self.VDDIO, self.GND, self.PAD)
  set-alignment(N, self.AVDDH, self.AVDDL, self.DVDDL, self.VDDIO)
  set-row(0, self.AVDDH, self.DVDDL)
  set-row(1, self.VDDIO, self.AVDDL, self.GND, self.PAD)
  set-alignment(S, self.GND, self.PAD)

  set-grid(box, [2, 2], cfg-r)
  set-bank(cfg-r,
    self.GPIO, self.LED1, self.LED2, self.XO, self.XI, self.ISET,
    self.SCL_MDC, self.SDI_SDA_MDIO, self.SDO, self.SCS_N,
    self.INTRP_N, self.RESET_N, self.PME_N
    )

  set-group("GPIO", self.GPIO)
  set-group("LEDS", self.LED1, self.LED2)
  set-row(0, self.GPIO, self.LED1, self.LED2)

  set-group("CLK", self.XO, self.XI)
  set-row(1, self.XO, self.XI, self.ISET)
  set-head-margin(1.0, self.ISET)

  set-group("CTL", self.INTRP_N, self.RESET_N, self.PME_N)
  set-row(0, self.INTRP_N, self.RESET_N, self.PME_N)

  set-group("CONFIG", self.SCL_MDC, self.SDI_SDA_MDIO, self.SDO, self.SCS_N)
  set-row(1, self.SCL_MDC, self.SDI_SDA_MDIO, self.SDO, self.SCS_N)

  assign-symbols(
    sw-r => box,
    pwr-r => box
    cfg-r => box
  )

  val pkg = QFN(
    num-leads = 64,
    lead-profile = QFN-Lead-Profile(
      span = 8.0 +/- 0.05,
      pitch = 0.4,
      lead-length = 0.40 +/- 0.05,
      lead-width = 0.20 +/- 0.05
    ),
    thermal-lead? = ThermalPad(
      Rectangle(6.5, 6.5),
      padding = 0.25,
      grid-size = 3
    ),
    package-body = PackageBody(
      width = 8.0 +/- 0.05,
      length = 8.0 +/- 0.05,
      height = 0.85 +/- 0.05
    ),
    density-level = DensityLevelB
  )

  val lp = create-landpattern(pkg)
  assign-landpattern(lp)

defn get-rail-voltage (p:JITXObject, -- def-V:Double, margin:Double) -> Double :
  ; TODO determine the communication interface here
  ;  Ideally - we are placing a property on the voltage rail pin
  ;  and using that to communicate somehow.
  def-V * margin

doc: \<DOC>
Gigabit Ethernet Switch

This module creates the KSZ9563 network switch IC and the
necessary supporting components for that network switch.

The user is expected to use the MII and MDI supports statements
to implement the connections to this device. Some of the
lower level features may need to be accessed directly via the
public `C` instance of KSZ9563

## References
KSZ9563RNX Hardware Design Checklist
@see https://ww1.microchip.com/downloads/aemDocuments/documents/OTH/ProductDocuments/SupportingCollateral/KSZ9563RNX-Hardware-Design-Checklist-00002770A.pdf



<DOC>
public defn module (
  R-query:ResistorQuery = get-default-resistor-query(),
  C-query:CapacitorQuery = get-default-capacitor-query(),
  ) -> Instantiable:
  pcb-module module-int:
    name = "KSZ9563 Ethernet Switch"

    port rail-1v2 : power
    port rail-IO : power
    port rail-analog : power
    port rail-analog-1v2 : power

    net GND (rail-1v2.V-, rail-IO.V-, rail-analog.V-, rail-analog-1v2.V-)

    public inst C : KSZ9563R

    net (GND, C.GND, C.PAD)

    ; MII Supports

    val mii-b = mii(MII-TXER)
    supports mii-b:
      mii-b.txd[0] => C.TXD[0]
      mii-b.txd[1] => C.TXD[1]
      mii-b.txd[2] => C.TXD[2]
      mii-b.txd[3] => C.TXD[3]
      mii-b.tx-clk => C.TXCLK_REFCLKI
      mii-b.tx-en => C.TXEN_TXCTL
      mii-b.tx-er => C.TX_ER

      mii-b.rxd[0] => C.RXD[0]
      mii-b.rxd[1] => C.RXD[1]
      mii-b.rxd[2] => C.RXD[2]
      mii-b.rxd[3] => C.RXD[3]
      mii-b.rx-clk => C.RXCLK_REFCLKO
      mii-b.rx-dv => C.RXDV_CRSDV_RXCTL
      mii-b.rx-er => C.RX_ER

    val rmii-bus = rmii(add-rx-error = false)
    supports rmii-bus: ; false => No RX error pin
      rmii-bus.txd[0] => C.TXD[0]
      rmii-bus.txd[1] => C.TXD[1]
      rmii-bus.tx-en => C.TXEN_TXCTL
      rmii-bus.crs-dv => C.RXDV_CRSDV_RXCTL

      rmii-bus.rxd[0] => C.RXD[0]
      rmii-bus.rxd[1] => C.RXD[1]

      ; This is the MAC Mode version - where the KSZ9563
      ;  is acting like a PHY and generates a REF-CLK for
      ;  the MCU or whatever MAC device.
      ; The PHY mode version would use `C.TXCLK_REFCLKI`
      ;  where an attached PHY would drive a REF-CLK into
      ;  the KSZ9563
      rmii-bus.ref-clk => C.RXCLK_REFCLKO

    supports rgmii:
      rgmii.TX.ctl => C.RXDV_CRSDV_RXCTL
      rgmii.TX.clk => C.RXCLK_REFCLKO
      rgmii.TX.data[0] => C.RXD[0]
      rgmii.TX.data[1] => C.RXD[1]
      rgmii.TX.data[2] => C.RXD[2]
      rgmii.TX.data[3] => C.RXD[3]

      rgmii.RX.ctl => C.TXEN_TXCTL
      rgmii.RX.clk => C.TXCLK_REFCLKI
      rgmii.RX.data[0] => C.TXD[0]
      rgmii.RX.data[1] => C.TXD[1]
      rgmii.RX.data[2] => C.TXD[2]
      rgmii.RX.data[3] => C.TXD[3]

    ; Configuration & Management Interfaces Supports
    supports miim:
      miim.mdio => C.SDI_SDA_MDIO
      miim.mdc => C.SCL_MDC

    val sspi = spi-with-cs()
    supports sspi:
      sspi.sck => C.SCL_MDC
      sspi.copi => C.SDI_SDA_MDIO
      sspi.cipo => C.SDO
      sspi.cs => C.SCS_N

    supports i2c:
      i2c.sda => C.SDI_SDA_MDIO
      i2c.scl => C.SCL_MDC

    property(self.i2c-addr) = 0x5F

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 1000Base-T MDI Support Statements
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;
    ;  For these supports, I need to match the
    ; P1 MDI with the P1 LEDs and similar for P2.
    ; To accomplish this - I create two custom bundles for
    ; P1 and P2 respectively, then I match these to the
    ; expected LEDs for those ports.

    pcb-bundle MDI-1000Base-T-P1:
      port TP : diff-pair[NUM_PAIRS_1000Base-T]

    make-1000Base-T-supports(
      MDI-1000Base-T-P1,
      [C.TXRX1P_A, C.TXRX1M_A]
      [C.TXRX1P_B, C.TXRX1M_B]
      [C.TXRX1P_C, C.TXRX1M_C]
      [C.TXRX1P_D, C.TXRX1M_D]
      )

    pcb-bundle MDI-1000Base-T-P2:
      port TP : diff-pair[NUM_PAIRS_1000Base-T]

    make-1000Base-T-supports(
      MDI-1000Base-T-P2,
      [C.TXRX2P_A, C.TXRX2M_A]
      [C.TXRX2P_B, C.TXRX2M_B]
      [C.TXRX2P_C, C.TXRX2M_C]
      [C.TXRX2P_D, C.TXRX2M_D]
      )

    supports MDI-1000BaseT-With-LEDs:
      require MDI-P1:MDI-1000Base-T-P1
      MDI-1000BaseT-With-LEDs.LED[0] => C.LED1[0]
      MDI-1000BaseT-With-LEDs.LED[1] => C.LED1[1]
      for i in 0 to NUM_PAIRS_1000Base-T do:
        MDI-1000BaseT-With-LEDs.MDI.TP[i].P => MDI-P1.TP[i].P
        MDI-1000BaseT-With-LEDs.MDI.TP[i].N => MDI-P1.TP[i].N

    supports MDI-1000BaseT-With-LEDs:
      require MDI-P2:MDI-1000Base-T-P2
      MDI-1000BaseT-With-LEDs.LED[0] => C.LED2[0]
      MDI-1000BaseT-With-LEDs.LED[1] => C.LED2[1]
      for i in 0 to NUM_PAIRS_1000Base-T do:
        MDI-1000BaseT-With-LEDs.MDI.TP[i].P => MDI-P2.TP[i].P
        MDI-1000BaseT-With-LEDs.MDI.TP[i].N => MDI-P2.TP[i].N

    ; GPIO Supports
    ;  These GPIO are primarily used for the IEEE1588 timing
    ;  either for capture or notification.

    for i in 1 through length(C.GPIO) do:
      supports gpio:
        gpio.gpio => C.GPIO[i]

    ;;;;;;;;;;;;;;;;;;;;;;;;
    ; Support Components
    ;;;;;;;;;;;;;;;;;;;;;;;;

    ; See: KSZ9563RNX Hardware Design Checklist - Section 5.0
    insert-resistor(C.ISET, GND, R-query, resistance = 6.04e3, precision = (1 %))

    ; Voltage Margin Relative to the intended voltage.
    ;  This helps set the minimum voltage range to search.
    val cap-margin = 2.0
    ; Set a maximum voltage search range for components
    val max-voltage = 16.0

    ; Bypass Capacitors
    ; See: KSZ9563RNX Hardware Design Checklist - Section 4.1

    val bypass-query = CapacitorQuery(
      C-query,
      sort! = SortKey(rated-voltage = Increasing)
    )

    val IO-voltage = get-rail-voltage(rail-IO, def-V = 3.3, margin = cap-margin)
    val core-voltage = get-rail-voltage(rail-1v2, def-V = 1.2, margin = cap-margin)
    val core-analog-V = get-rail-voltage(rail-analog-1v2, def-V = 1.2, margin = cap-margin)
    val analog-voltage = get-rail-voltage(rail-analog, def-V = 3.3, margin = cap-margin)

    ; Find the largest rail voltage and we will use that to plan our
    val max-rail-V = maximum([IO-voltage, core-voltage, core-analog-V, analog-voltage])

    ; Smaller Bypass Cap - we place one per pin.
    val fine-C = create-capacitor(
      bypass-query,
      capacitance = 0.1e-6,
      rated-voltage = Interval(max-rail-V, max-voltage)
    )

    ; Bulk Capacitance - We place one of these per rail.
    val bulk-C = create-capacitor(
      bypass-query,
      capacitance = 22.0e-6
      rated-voltage = Interval(max-rail-V, max-voltage)
      case = ["0603", "0805", "1206"]
    )

    for p in pins(C.VDDIO) do:
      net (p, rail-IO.V+)
      val c = insert-bypass(p, GND, elem-type = fine-C)
      schematic-group(c) = bypass-cap-IO

    ; Bulk Capacitance
    val cb-io = insert-bypass(C.VDDIO[0], GND, elem-type = bulk-C)
    schematic-group(cb-io) = bypass-cap-IO

    for p in pins(C.DVDDL) do:
      net (rail-1v2.V+, p)
      val c = insert-bypass(p, GND, elem-type = fine-C)
      schematic-group(c) = bypass-cap-DVDDL

    val cb-dvddl = insert-bypass(C.DVDDL[0], GND, elem-type = bulk-C)
    schematic-group(cb-dvddl) = bypass-cap-DVDDL

    for p in pins(C.AVDDL) do:
      net (rail-analog-1v2.V+, p)
      val c = insert-bypass(p, GND, elem-type = fine-C)
      schematic-group(c) = bypass-cap-AVDDL

    val cb-avdd = insert-bypass(C.AVDDL[0], GND, elem-type = bulk-C)
    schematic-group(cb-avdd) = bypass-cap-AVDDL

    for p in pins(C.AVDDH) do:
      net (rail-analog.V+, p)
      val c = insert-bypass(p, GND, elem-type = fine-C)
      schematic-group(c) = bypass-cap-AVDDH

    val cb-ah = insert-bypass(C.AVDDH[0], GND, elem-type = bulk-C)
    schematic-group(cb-ah) = bypass-cap-AVDDH

  ; Returned Instantiable
  module-int 

val rmii-bus = rmii(add-rx-error = false)

doc: \<DOC>
KSZ9563 Network Switch Circuit

This module defines many of the supporting features
for instantiating the KSZ9563 circuit in a design.

This module makes the underlying component instance `netsw`
public so that the user can directly access ports as necessary.

The current implementation is supports RMII and MIIM for
the configuration interface.

@member VDD-1v2 1.2V Power Rail input. This rail will be used
for both the digital and analog 1.2V rails with a ferrite power filter
instantiated for the analog.
@member VDD-3v3 3.3V Power rail input. THis rail will be used
for the VDD-IO and the Analog 3.3V power rail. A ferrite power filter
is applied to source to the analog power rail.
@member mii Media Independent Interface implemented as a RMII
(Reduced Media Independent Interface)
@member management Management interface, currently implemented as
a MIIM interface.
@member power-evt-n Active low power event signal from the switch
@member irq-n Active low interrupt request signal from the switch

@param substrate PCB Substrate where the via's are defined. This
circuit requires at least one via that is `via-in-pad` capable.
@param make-oscillator Instantiate a crystal oscillator circuit for
the switch. Use `false` here to drive the clock input of the KSZ9563
directly with a logic level signal. Default value is `true`.
@param enable-in-band-msg Enable the In-band management interface.
This allows the user to make modifications to the switch via the
ethernet interface. See section 4.10 in the datasheet. By default,
this is deactivated.
@param enable-on-reset Enable network switching to start on
reset of the network switch. By default this is activated.
@param enable-gigabit Configures Port 3 MAC as Gigabit. If
deasserted, then the MAC operates at 100Mbps speed. Default is
activated.
@param rmii-clock-mode Configures the RMII directional flow
of the clock. In normal mode, the RMII interface receives
a clock from the PHY. In clock mode, the RMII interface
generates a clock to drive the MAC on a MCU. By default,
the clock mode is active. This flag only affects RMII
mode.

<DOC>
public defn circuit (
  substrate:Substrate
  --
  make-oscillator:True|False = true,
  enable-in-band-mng:True|False = false,
  enable-on-reset:True|False = true,
  enable-gigabit:True|False = true,
  rmii-clock-mode:True|False = true,
  R-query:ResistorQuery = get-default-resistor-query(),
  C-query:CapacitorQuery = get-default-capacitor-query()
  ):
  pcb-module circuit-t:

    port VDD-1v2 : power
    port VDD-3v3 : power

    port mii : rmii-bus
    port management : miim

    port power-evt-n
    port irq-n
    port LEDs : pin[2][2]

    public inst netsw : microchip-networking/components/KSZ9563/module(R-query, C-query)

    net (VDD-3v3, netsw.rail-IO)
    net (VDD-1v2, netsw.rail-1v2)
    net GND (VDD-3v3.V-, netsw.C.PAD)

    net (LEDs[0][0], netsw.C.LED1[0])
    net (LEDs[0][1], netsw.C.LED1[1])
    net (LEDs[1][0], netsw.C.LED2[0])
    net (LEDs[1][1], netsw.C.LED2[1])

    ;; ---- Power ----

    ; Construct a Filter with a ferrite to apply:
    ; 1.  3.3V rail to analog vdd
    ; 2.  1.2V rail to analog core vdd

    val ferrite = passives/ferrite/BLM18KG(220)
    inst filt-3v3 : unbalanced-filter(ferrite)
    net (VDD-3v3, filt-3v3.vin)
    net (filt-3v3.vout, netsw.rail-analog)

    inst filt-1v2 : unbalanced-filter(ferrite)
    net (VDD-1v2, filt-1v2.vin)
    net (filt-1v2.vout, netsw.rail-analog-1v2)

    net A1v2 (netsw.rail-analog-1v2.V+)
    net A3v3 (netsw.rail-analog.V+)
    make-test-points([A1v2, A3v3])

    ; ------- Via Grid -----------
    val therm-via = first!{One, _} $ query-via(
      substrate,
      start = Top,
      via-in-pad = true
      )

    val tv-g = GridThermalVias(
      via-def = therm-via,
      grid-def = GridPlanner(
        pitch = 1.2,
        columns = 6,
        rows = 6
      )
    )

    make-via-grid(tv-g, netsw.C.PAD)

    if make-oscillator:
      ;; ---- Crystal ----
      ;  25MHz +/- 50ppm

      val xtal-type = passives/crystal/FA-238(25)

      val resonator-type = create-crystal-resonator(
        xtal-type = xtal-type,
        C-load = typ(property(xtal-type.C-load))
        ; From IBIS file
        C-stray = typ(0.25e-12),
        V-rating = 2.0 * 3.3 ; AVDDH
      )

      inst resonator : resonator-type
      net (resonator.COMMON, GND)
      net (resonator.p[1], netsw.C.XI)
      ; Add a series resistor for dampening if needed.
      insert-resistor(
        resonator.p[2], netsw.C.XO,
        R-query,
        resistance = 0.0,
      )

    ;; ---- Configuration Straps ------

    val pullup-R-t = create-resistor(R-query, resistance = 4.7e3)
    inst configs : ConfigStrap(
      num-elems = 4,
      comp = pullup-R-t,
      pack? = One(LongitudinalPacking(margin = 0.2))
    )
    net (configs.hi, VDD-3v3.V+)
    net (configs.lo, GND)

    ; TODO - use pin assignment and determine mappings
    ;   for configuration bom status after routing.
    net (configs.configs[0], netsw.C.LED1[1])
    net (configs.configs[1], netsw.C.LED1[0])
    net (configs.configs[2], netsw.C.LED2[1])
    net (configs.configs[3], netsw.C.LED2[0])

    ; These configurations are shared on
    ;    LED2_0
    ; RMII - Clock/Normal Mode
    ; RGMII - IBS enable/disable

    val cfg =
      (1 when not enable-in-band-mng else 0) |
      (2 when enable-on-reset else 0) |
      (4 when enable-gigabit else 0) |
      (8 when not rmii-clock-mode else 0 )

    set-straps-config(configs, cfg)

    ; RXD0-3 have internal pull-downs
    ; [RXD1, RXD0] => 00 => MIIM interface
    ; [RXD3, RXD2] => 01 => RMII

    insert-pullup(
      netsw.C.RXD[2], VDD-3v3,
      elem-type = pullup-R-t,
    )

    ; PME_N must be pullup high to provide to enable
    ;  Auto-negotiation.
    insert-pullup(
      netsw.C.PME_N, VDD-3v3,
      elem-type = pullup-R-t
    )
    net PME_N (power-evt-n, netsw.C.PME_N)

    insert-pullup(
      netsw.C.INTRP_N, VDD-3v3,
      elem-type = pullup-R-t
    )
    net IRQ_N (irq-n, netsw.C.INTRP_N)

    make-test-points([IRQ_N, PME_N])


    ; These connections are not used in the MIIM
    ;   management interface.
    no-connect(netsw.C.SDO)
    no-connect(netsw.C.SCS_N)

    ;;  ----  RMII Setup ------
    require sw-bus : rmii-bus from netsw

    ; This inserts series resistors between the
    ;  RMII transmit pins from the netsw and then
    ;  assigns short-trace to them so that they get
    ;  placed near the network switch.

    ; These signals are inputs and do not require the
    ;   series resistor - The MAC side on the microcontroller
    ;   will provide dampening resistors near its transmitter.
    topo-bus([sw-bus.tx-en, sw-bus.txd] => [mii.tx-en, mii.txd])

    val series-R-type = create-resistor(R-query, resistance = 51.0, precision = (1 %), case = ["0402"])
    ; pin-model(series-R-type.p[1], series-R-type.p[2]) = PinModel(typ(1.0e-12), typ(0.0))

    val rx-bus = [sw-bus.rxd, sw-bus.crs-dv, sw-bus.ref-clk]
    val rx-out = [mii.rxd, mii.crs-dv, mii.ref-clk]
    topo-bus(ShortTrace(rx-bus => series-R-type) => rx-out)

    ; We need to set signal ends here because the series
    ;  resistors will present a problem when attempting to
    ;  apply the routing structure at the top-level.
    set-signal-end(mii, sw-bus)

    ;;  ---- Management Interface -----

    require miim-bus:miim from netsw
    net (management, miim-bus)
  circuit-t


